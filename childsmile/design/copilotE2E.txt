import { PureComponent } from "react"

Sure, let's get your login flow working with the provided files. We'll use the dummy data and focus on getting the basic functionality up and running.

### Step 1: Set Up the React Frontend

We'll start by creating the React components and styles based on your provided files.

#### index.js
This file sets up the React application and renders the `Login` component.
```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import Login from './Login';
import './styles.css';

ReactDOM.render(<Login />, document.getElementById('root'));
```

#### Login.js
This file contains the `Login` component, which includes the login form and some additional elements.
```javascript
import React, { useState } from 'react';
import logo from '../public/assets/logo.png';
import amit from '../public/assets/amit.jpg';
import qrCode from '../public/assets/qr-code.png';

const Login = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleLogin = (e) => {
    e.preventDefault();
    if (username === 'admin' && password === '1234') {
      // Simulate successful login
      alert('Login successful!');
    } else {
      setError('Invalid credentials');
    }
  };

  return (
    <div className="login-container">
      <img src={logo} alt="Logo" className="logo" />
      <form className="login-form" onSubmit={handleLogin}>
        <input
          type="text"
          placeholder="שם משתמש"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
        />
        <input
          type="password"
          placeholder="סיסמה"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit" id="submit-btn">התחבר</button>
        {error && <p className="error">{error}</p>}
      </form>
      <div className="top-left">
        <img src={amit} alt="Amit" />
        <p>
          הרבה אנשים אומרים שהם רוצים להצליח
          <br />
          אבל לא כולם מוכנים לשלם את המחיר שצריך כדי להצליח
        </p>
        <img src={qrCode} alt="QR Code" />
      </div>
    </div>
  );
};

export default Login;
```

#### styles.css
This file contains the styles for the login page.
```css
body {
  direction: rtl;
  font-family: Arial, sans-serif;
}

.login-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
}

.logo {
  margin-bottom: 20px;
  width: 100px; /* Adjust the width as needed */
  height: auto; /* Maintain aspect ratio */
}

.login-form {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.login-form input {
  margin: 5px 0;
  padding: 10px;
  width: 200px;
}

.login-form button {
  padding: 10px 20px;
  margin-top: 10px;
}

.top-left {
  position: absolute;
  top: 10px;
  left: 10px;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.top-left img {
  margin: 5px 0;
  width: 100px; /* Adjust the width as needed */
  height: auto; /* Maintain aspect ratio */
}

.error {
  color: red;
  margin-top: 10px;
}
```

### Step 2: Set Up the Django Backend

We'll create a simple Django view to handle the login request. Since you mentioned using dummy data, we'll skip the actual authentication and just return a success response if the username and password match the dummy credentials.

#### views.py
```python
from django.http import JsonResponse
from rest_framework.decorators import api_view

@api_view(['POST'])
def login_view(request):
    username = request.data.get('username')
    password = request.data.get('password')
    if username == 'admin' and password == '1234':
        return JsonResponse({'message': 'Login successful!'})
    else:
        return JsonResponse({'error': 'Invalid credentials'}, status=400)
```

#### urls.py
```python
from django.urls import path
from .views import login_view

urlpatterns = [
    path('api/login/', login_view, name='login'),
]
```

### Step 3: Connect Frontend and Backend

Update the `handleLogin` function in `Login.js` to make a request to the Django backend.

#### Login.js (updated)
```javascript
import React, { useState } from 'react';
import axios from 'axiosConfig';
import logo from '../public/assets/logo.png';
import amit from '../public/assets/amit.jpg';
import qrCode from '../public/assets/qr-code.png';

const Login = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('/api/login/', { username, password });
      alert(response.data.message);
    } catch (err) {
      setError('Invalid credentials');
    }
  };

  return (
    <div className="login-container">
      <img src={logo} alt="Logo" className="logo" />
      <form className="login-form" onSubmit={handleLogin}>
        <input
          type="text"
          placeholder="שם משתמש"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
        />
        <input
          type="password"
          placeholder="סיסמה"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit" id="submit-btn">התחבר</button>
        {error && <p className="error">{error}</p>}
      </form>
      <div className="top-left">
        <img src={amit} alt="Amit" />
        <p>
          הרבה אנשים אומרים שהם רוצים להצליח
          <br />
          אבל לא כולם מוכנים לשלם את המחיר שצריך כדי להצליח
        </p>
        <img src={qrCode} alt="QR Code" />
      </div>
    </div>
  );
};

export default Login;
```

This should give you a working login flow with the provided files. Let me know if you need any further assistance!


install npm after new PC 
To back up and reinstall all your npm packages, follow these steps:

---

### **1. Generate a List of Installed Packages (Backup)**
On your old PC, navigate to your project folder (`frontend`) and run:

```sh
npm list --depth=0 --json > npm-packages.json
```

or, if you prefer a simple text format:

```sh
npm list --depth=0 > npm-packages.txt
```

This will list all installed packages **without dependencies** (so you don’t get thousands of lines).

---

### **2. Restore Packages on Your New PC**
Once you've moved your project folder (`frontend`) to your new PC:

#### **Option 1: Install from `package.json` (Recommended)**
If you still have `package.json` and `package-lock.json`, just run:

```sh
npm install
```

This will install all dependencies exactly as they were.

#### **Option 2: Install from Backup File**
If you only have the `npm-packages.txt` or `npm-packages.json` file:

1. Extract package names from `npm-packages.txt` and install them:

   ```sh
   cat npm-packages.txt | awk '{print $2}' | xargs npm install
   ```

   *(On Windows, open PowerShell and use:)*  

   ```powershell
   Get-Content npm-packages.txt | ForEach-Object { $_ -split ' ' | Select-Object -Index 1 } | ForEach-Object { npm install $_ }
   ```

2. If you have `npm-packages.json`, use:

   ```sh
   cat npm-packages.json | jq -r '.dependencies | keys[]' | xargs npm install
   ```

   *(On Windows, use PowerShell and install `jq` first or manually copy package names.)*

---

### **3. Verify Everything Works**
After installing, check if all dependencies are installed:

```sh
npm list --depth=0
```

If anything is missing, just run:

```sh
npm install
```

Restore on New PC
On your new PC, navigate to your project folder and run:

sh
Copy
Edit
pip install -r requirements.txt


Get-Content git-repos.txt | ForEach-Object {
    $repo = $_.Trim()
    if (Test-Path "$repo\.git") {
        Write-Host "$repo already exists, skipping..."
    } else {
        $parentDir = Split-Path $repo -Parent
        $repoName = Split-Path $repo -Leaf
        Set-Location $parentDir
        git clone $(git -C $repo remote get-url origin)
    }
}

Restore on New PC
Restore Databases:
Move all_databases.sql to the new PC and run:

sh
Copy
Edit
psql -U postgres -f all_databases.sql