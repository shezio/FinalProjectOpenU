Great to hear you have Python 3.11.3 installed! Let's set up your project using a virtual environment (venv) on Windows. This will help you manage dependencies without needing admin rights.


  python -m venv myenv

  myenv\Scripts\activate

  pip install django djangorestframework psycopg2-binary


  //django-admin startproject childsmile

  # move to the folder where python exe is located
  cd childsmile 

- Update your `settings.py` to configure PostgreSQL.
  ```python
  DATABASES = {
      'default': {
          'ENGINE': 'django.db.backends.postgresql',
          'NAME': 'child_smile_db',
          'USER': 'child_smile_user',
          'PASSWORD': '0192pqowL@!',
          'HOST': 'localhost',
          'PORT': '5432',
      }
  }
  python manage.py makemigrations
  python manage.py migrate

  python manage.py startapp childsmile_app



2. **Manually Install Dependencies**:
   Install the required dependencies with compatible versions:
   ```sh
   mkdir frontend
   cd frontend
   npm init -y
   npm install react@18.0.0 react-dom@18.0.0
   npm install --save-dev @babel/preset-react @babel/preset-env webpack webpack-cli webpack-dev-server
   npm install @testing-library/react@latest @testing-library/jest-dom@latest @testing-library/user-event@latest web-vitals@latest
   npm outdated
   npm update

- Update `settings.py` to include `rest_framework`.
  INSTALLED_APPS = [
      ...
      'rest_framework',
  ]

### Using psql Command Line Tool

1. **Open psql and Connect to Your Database**
   ```bash
   psql -U postgres -d child_smile_db
   ```

2. **Run Your SQL Scripts**
   - You can either paste your SQL commands directly into the psql prompt or run a SQL file containing all your commands.
   - To run a SQL file, use the `\i` command followed by the path to your file:
     ```sql
     cp C:\Dev\FinalProjectOpenU\SQLS.sql .\SQLS.sql
     \i SQLS.sql
     ```

### Using pgAdmin

1. **Open pgAdmin and Connect to Your Database**
   - Open pgAdmin and connect to your PostgreSQL server.
   - Navigate to your `child_smile_db` database.

2. **Open the Query Tool**
   - Right-click on your database and select `Query Tool`.

3. **Run Your SQL Scripts**
   - Paste your SQL commands into the query editor and execute them by clicking the run button (lightning bolt icon).

You can list all tables and their schemas in psql using the following commands:

### 1. **List All Tables**
- To list all tables in the current database:
  ```sql
  \dt
  ```

### 2. **Describe Table Schema**
- To describe the schema of a specific table, use the `\d` command followed by the table name. For example, to describe the `Permissions` table:
  ```sql
  \d Permissions
  ```

### 3. **List All Tables with Schemas**
- To list all tables along with their schemas:
  ```sql
  \dt+ 
  ```

### 4. **List All Schemas**
- To list all schemas in the database:
  ```sql
  \dn
  ```

### Example Session
Here's an example of how you might use these commands in a psql session:

```bash
psql -U postgres -d child_smile_db
```

```sql
-- List all tables
\dt

-- Describe the schema of the Permissions table
\d Permissions

-- List all tables with schemas
\dt+

-- List all schemas
\dn
```

To clear the screen in psql without exiting, you can use the following command:

```sql
\! cls
```

To see the column structure of each table, you can use the `\d` command followed by the table name. Hereâ€™s how you can do it for each table:

### Example for the `Permissions` Table
```sql
\d permissions
```

### Example for the `Staff` Table
```sql
\d staff
```

### Example for the `signedup` Table
```sql
\d signedup
```

### Example for All Tables
You can run the `\d` command for each table listed in your database. Hereâ€™s a quick list of commands for all the tables you mentioned:

```sql
-- \d auth_group
-- \d auth_group_permissions
-- \d auth_permission
-- \d auth_user
-- \d auth_user_groups
-- \d auth_user_user_permissions
-- \d django_admin_log
-- \d django_content_type
-- \d django_migrations
-- \d django_session
\d feedback
\d general_v_feedback
\d general_volunteer
\d pending_tutor
\d permissions
\d signedup
\d staff
\d task_types
\d tasks
\d tutor_feedback
\d tutors
```

Running these commands will display the column structure for each table, including column names, data types, and any constraints.

Let me know if you need any more help! ðŸ˜Š
### SQL Insert Commands
INSERT INTO Permissions (role, resource, action) VALUES ('×ž× ×”×œ', 'staff', 'create');
SELECT * FROM Permissions;

### more front end commands just to see we can start development
mkdir public
echo "<!DOCTYPE html>
<html lang='en'>
<head>
  <meta charset='UTF-8'>
  <meta name='viewport' content='width=device-width, initial-scale=1.0'>
  <title>React App</title>
</head>
<body>
  <div id='root'></div>
  <script src='../dist/bundle.js'></script>
</body>
</html>" > public/index.html

mkdir src
echo "import React from 'react';
import ReactDOM from 'react-dom';

const App = () => <div>Hello, React!</div>;

ReactDOM.render(<App />, document.getElementById('root'));" > src/index.js

### babelrc - paste this in the file
{
    "presets": [
        "@babel/preset-env",
        "@babel/preset-react"
    ]
}

### webpacg.config.js - save in UTF-8!!!
const path = require('path');

module.exports = {
  mode: 'development',
  entry: './src/index.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js'
  },
  module: {
    rules: [
      {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader'
        }
      }
    ]
  },
  devServer: {
    static: {
      directory: path.join(__dirname, 'public'),
    },
    compress: true,
    port: 9000
  }
};

npm install --save-dev babel-loader
npm audit fix --force